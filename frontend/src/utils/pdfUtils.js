import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';

export const generateATSReportPDF = async (report, elementId = null) => {
  try {
    const pdf = new jsPDF('p', 'mm', 'a4');
    const pageWidth = pdf.internal.pageSize.getWidth();
    const pageHeight = pdf.internal.pageSize.getHeight();
    const margin = 20;
    let yPosition = margin;

    // Helper function to add text with automatic wrapping
    const addWrappedText = (text, x, y, maxWidth, fontSize = 11) => {
      pdf.setFontSize(fontSize);
      const lines = pdf.splitTextToSize(text, maxWidth);
      pdf.text(lines, x, y);
      return y + (lines.length * fontSize * 0.35);
    };

    // Header
    pdf.setFontSize(20);
    pdf.setTextColor(59, 130, 246); // Primary blue
    pdf.text('ATS Score Report', margin, yPosition);
    yPosition += 15;

    // Date
    pdf.setFontSize(10);
    pdf.setTextColor(100, 100, 100);
    pdf.text(`Generated on: ${new Date(report.analyzedAt).toLocaleDateString()}`, margin, yPosition);
    yPosition += 10;

    // Score section
    pdf.setFontSize(16);
    pdf.setTextColor(0, 0, 0);
    pdf.text('Overall ATS Score', margin, yPosition);
    yPosition += 8;

    pdf.setFontSize(24);
    pdf.setTextColor(59, 130, 246);
    pdf.text(`${report.score}%`, margin, yPosition);
    yPosition += 15;

    // Score interpretation
    let interpretation = '';
    if (report.score >= 80) {
      interpretation = 'Excellent - Your resume is well-optimized for ATS systems';
    } else if (report.score >= 60) {
      interpretation = 'Good - Some improvements recommended';
    } else {
      interpretation = 'Needs Improvement - Consider significant revisions';
    }

    pdf.setFontSize(11);
    pdf.setTextColor(100, 100, 100);
    yPosition = addWrappedText(interpretation, margin, yPosition, pageWidth - 2 * margin);
    yPosition += 10;

    // Section scores
    pdf.setFontSize(14);
    pdf.setTextColor(0, 0, 0);
    pdf.text('Section Breakdown', margin, yPosition);
    yPosition += 10;

    Object.entries(report.sections).forEach(([section, data]) => {
      pdf.setFontSize(12);
      pdf.text(`${section.charAt(0).toUpperCase() + section.slice(1)}: ${data.score}%`, margin, yPosition);
      yPosition += 6;
      
      pdf.setFontSize(10);
      pdf.setTextColor(100, 100, 100);
      yPosition = addWrappedText(data.feedback, margin + 5, yPosition, pageWidth - 2 * margin - 5, 10);
      yPosition += 5;
      pdf.setTextColor(0, 0, 0);
    });

    yPosition += 5;

    // Matched Skills
    if (yPosition > pageHeight - 60) {
      pdf.addPage();
      yPosition = margin;
    }

    pdf.setFontSize(14);
    pdf.setTextColor(0, 0, 0);
    pdf.text('Matched Skills', margin, yPosition);
    yPosition += 8;

    pdf.setFontSize(11);
    const matchedSkillsText = report.matchedSkills.join(', ');
    yPosition = addWrappedText(matchedSkillsText, margin, yPosition, pageWidth - 2 * margin);
    yPosition += 10;

    // Missing Skills
    pdf.setFontSize(14);
    pdf.setTextColor(0, 0, 0);
    pdf.text('Missing Skills', margin, yPosition);
    yPosition += 8;

    pdf.setFontSize(11);
    const missingSkillsText = report.missingSkills.join(', ');
    yPosition = addWrappedText(missingSkillsText, margin, yPosition, pageWidth - 2 * margin);
    yPosition += 10;

    // Suggestions
    if (yPosition > pageHeight - 40) {
      pdf.addPage();
      yPosition = margin;
    }

    pdf.setFontSize(14);
    pdf.setTextColor(0, 0, 0);
    pdf.text('Recommendations', margin, yPosition);
    yPosition += 10;

    pdf.setFontSize(11);
    report.suggestions.forEach((suggestion, index) => {
      if (yPosition > pageHeight - 20) {
        pdf.addPage();
        yPosition = margin;
      }
      yPosition = addWrappedText(`${index + 1}. ${suggestion}`, margin, yPosition, pageWidth - 2 * margin);
      yPosition += 5;
    });

    // Footer
    pdf.setFontSize(8);
    pdf.setTextColor(150, 150, 150);
    pdf.text('Generated by ATS Scorer - Optimize your resume for success', margin, pageHeight - 10);

    // Save the PDF
    const fileName = `ats-report-${report.fileName.replace(/\.[^/.]+$/, '')}-${Date.now()}.pdf`;
    pdf.save(fileName);

    return { success: true, fileName };
  } catch (error) {
    console.error('Error generating PDF:', error);
    throw new Error('Failed to generate PDF report');
  }
};

export const generateDashboardReportPDF = async (stats, reports) => {
  try {
    const pdf = new jsPDF('p', 'mm', 'a4');
    const pageWidth = pdf.internal.pageSize.getWidth();
    const margin = 20;
    let yPosition = margin;

    // Header
    pdf.setFontSize(20);
    pdf.setTextColor(59, 130, 246);
    pdf.text('ATS Dashboard Report', margin, yPosition);
    yPosition += 15;

    // Date
    pdf.setFontSize(10);
    pdf.setTextColor(100, 100, 100);
    pdf.text(`Generated on: ${new Date().toLocaleDateString()}`, margin, yPosition);
    yPosition += 15;

    // Statistics
    pdf.setFontSize(14);
    pdf.setTextColor(0, 0, 0);
    pdf.text('Summary Statistics', margin, yPosition);
    yPosition += 10;

    const statsData = [
      ['Total Reports:', stats.totalReports],
      ['Average Score:', `${stats.averageScore}%`],
      ['Highest Score:', `${stats.highestScore}%`],
      ['Lowest Score:', `${stats.lowestScore}%`]
    ];

    pdf.setFontSize(11);
    statsData.forEach(([label, value]) => {
      pdf.text(label, margin, yPosition);
      pdf.text(value.toString(), margin + 50, yPosition);
      yPosition += 7;
    });

    yPosition += 10;

    // Recent reports table
    pdf.setFontSize(14);
    pdf.text('Recent Reports', margin, yPosition);
    yPosition += 10;

    pdf.setFontSize(10);
    pdf.text('Date', margin, yPosition);
    pdf.text('File', margin + 40, yPosition);
    pdf.text('Score', margin + 120, yPosition);
    yPosition += 7;

    // Draw line under headers
    pdf.line(margin, yPosition - 2, pageWidth - margin, yPosition - 2);
    yPosition += 3;

    stats.recentReports.forEach(report => {
      const date = new Date(report.analyzedAt).toLocaleDateString();
      const fileName = report.fileName.length > 25 ? 
        report.fileName.substring(0, 22) + '...' : 
        report.fileName;
      
      pdf.text(date, margin, yPosition);
      pdf.text(fileName, margin + 40, yPosition);
      pdf.text(`${report.score}%`, margin + 120, yPosition);
      yPosition += 6;
    });

    // Footer
    pdf.setFontSize(8);
    pdf.setTextColor(150, 150, 150);
    pdf.text('Generated by ATS Scorer', margin, pdf.internal.pageSize.getHeight() - 10);

    // Save the PDF
    const fileName = `ats-dashboard-report-${Date.now()}.pdf`;
    pdf.save(fileName);

    return { success: true, fileName };
  } catch (error) {
    console.error('Error generating dashboard PDF:', error);
    throw new Error('Failed to generate dashboard PDF');
  }
};

export const captureElementAsPDF = async (elementId, fileName = 'report.pdf') => {
  try {
    const element = document.getElementById(elementId);
    if (!element) {
      throw new Error('Element not found');
    }

    const canvas = await html2canvas(element, {
      scale: 2,
      useCORS: true,
      allowTaint: true,
      backgroundColor: '#ffffff'
    });

    const imgData = canvas.toDataURL('image/png');
    const pdf = new jsPDF('p', 'mm', 'a4');
    
    const imgWidth = 210;
    const pageHeight = 295;
    const imgHeight = (canvas.height * imgWidth) / canvas.width;
    let heightLeft = imgHeight;
    let position = 0;

    pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
    heightLeft -= pageHeight;

    while (heightLeft >= 0) {
      position = heightLeft - imgHeight;
      pdf.addPage();
      pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
      heightLeft -= pageHeight;
    }

    pdf.save(fileName);
    return { success: true, fileName };
  } catch (error) {
    console.error('Error capturing element as PDF:', error);
    throw new Error('Failed to generate PDF from element');
  }
};